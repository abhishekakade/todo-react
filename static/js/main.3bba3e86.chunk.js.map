{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","_this$props","this","props","item","handleChange","handleSubmit","react_default","a","createElement","className","onSubmit","type","name","placeholder","id","value","onChange","Component","TodoItem","title","handleDelete","onClick","TodoList","items","clearList","map","TodoItem_TodoItem","key","App","state","uuid","editItem","e","_this","setState","target","preventDefault","newItem","console","log","updatedItems","concat","Object","toConsumableArray","filteredItems","filter","TodoInput_TodoInput","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3bba3e86.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class TodoInput extends Component {\r\n  render() {\r\n    const { item, handleChange, handleSubmit } = this.props;\r\n\r\n    return (\r\n      <div className=\"card card-body my-3\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"input-group\">\r\n            <div className=\"input-group-prepend\">\r\n              <div className=\"input-group-text bg-dark text-white\">\r\n                <i className=\"fas fa-book\" />\r\n              </div>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control text-capitalize bg-gradient-dark\"\r\n              name=\"\"\r\n              placeholder=\"Add a To-Do\"\r\n              id=\"add-todo\"\r\n              value={item}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <button\r\n            className=\"btn btn-block btn-dark mt-3\"\r\n            type=\"submit\"\r\n            // onClick={this.handleClickFunc}\r\n          >\r\n            Add Item\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class TodoItem extends Component {\r\n  render() {\r\n    const { title, handleDelete } = this.props;\r\n\r\n    return (\r\n      <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n        Hello there!\r\n        <h6>{title}</h6>\r\n        <div className=\"todo-icon\">\r\n          <span className=\"mx-2 text-dark\">\r\n            <i className=\"fas fa-pen\" />\r\n          </span>\r\n          <span className=\"mx-2 text-danger\" onClick={handleDelete}>\r\n            <i className=\"fas fa-trash\" />\r\n          </span>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n// import TodoInput from './TodoInput';\r\n\r\nexport default class TodoList extends Component {\r\n  render() {\r\n    const { items, clearList, handleDelete } = this.props;\r\n    return (\r\n      <div>\r\n        <ul className=\"list-group my-5\">\r\n          <h3 className=\"text-capitalize text-center\">Todo List</h3>\r\n\r\n          {items.map(item => {\r\n            return (\r\n              <TodoItem\r\n                key={item.id}\r\n                title={item.title}\r\n                /* cannot run handleDelete(item.id) as it needs to be passed in as a reference. \r\n                Using an arrow function that returns handleDelete(item.id) is the proper way of doing this \r\n                because we are running an arrow function and that arrow function implicitly returns this reference. */\r\n                handleDelete={() => {\r\n                  handleDelete(item.id);\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n\r\n          <button\r\n            onClick={clearList}\r\n            type=\"button\"\r\n            className=\"btn btn-danger btn-block text-capitalize mt-5\"\r\n          >\r\n            Clear List\r\n          </button>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport uuid from \"uuid\";\n\nclass App extends Component {\n  state = {\n    items: [],\n    id: uuid(),\n    item: \"\",\n    editItem: false\n  };\n\n  handleChange = e => {\n    this.setState({\n      item: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    };\n\n    console.log(newItem);\n\n    const updatedItems = [...this.state.items, newItem];\n\n    this.setState({\n      items: updatedItems,\n      item: \"\",\n      id: uuid(),\n      editItem: false\n    });\n  };\n\n  clearList = () => {\n    // confirm('Are you sure you want to delete all the items in your To Do List?') ? this.setState({items: []}) : false;\n    this.setState({\n      items: []\n    });\n  };\n\n  handleDelete = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n\n    this.setState({\n      items: filteredItems\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capitalize text-center\">Todo Input</h3>\n\n            <TodoInput\n              item={this.state.item}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n            />\n\n            <TodoList\n              items={this.state.items}\n              clearList={this.clearList}\n              handleDelete={this.handleDelete}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}